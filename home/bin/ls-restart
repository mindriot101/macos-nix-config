#!/usr/bin/env python

import sys
import os
import subprocess as sp
import argparse


def in_tmux() -> bool:
    return "TMUX" in os.environ


class Fzf:
    @staticmethod
    def select_from(choices: list[str]) -> str | None:
        if in_tmux():
            cmd = ["fzf-tmux"]
        else:
            cmd = ["fzf"]

        cmd.extend(["--prompt", "LocalStack container not found, select a container to restart: "])

        p = sp.Popen(cmd, stdin=sp.PIPE, stdout=sp.PIPE, stderr=sp.PIPE)
        stdout, stderr = p.communicate(input="\n".join(choices).encode())
        if p.returncode != 0:
            print(stderr, file=sys.stderr)
            return None

        return stdout.decode().strip()


class DockerClient:
    @staticmethod
    def list_containers() -> list[str]:
        cmd = ["docker", "ps", "--format", "{{.Names}}"]
        return sp.check_output(cmd).decode().splitlines()

    @staticmethod
    def restart_container(container_name: str):
        cmd = ["docker", "kill", "--signal", "USR1", container_name]
        sp.check_call(cmd, stdout=sp.PIPE)


def main() -> int:
    parser = argparse.ArgumentParser()
    opts, args = parser.parse_known_args()

    container_name = "localstack-main"
    if args:
        container_name = args[0]

    running_containers = DockerClient.list_containers()
    if container_name in running_containers:
        DockerClient.restart_container(container_name)
        return 0

    chosen_container_name = Fzf.select_from(running_containers)
    if not chosen_container_name:
        print("No container name chosen or found, exiting", file=sys.stderr)
        return 1

    DockerClient.restart_container(chosen_container_name)
    return 0


if __name__ == "__main__":
    raise SystemExit(main())
